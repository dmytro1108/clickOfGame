{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"/Users/dima/Desktop/\\\"Summer 2025\\\"/clickOfGame/src/index.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst react_1 = __importStar(require(\"react\"));\nconst client_1 = require(\"react-dom/client\");\nclass GetTheCoords {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n  }\n}\nclass MyListState {\n  constructor() {\n    this.nClicks = 0;\n  }\n}\n/**\n * The Board class encompasses a framework for the game playing field. The buildGrid method is\n * responsible for producing an array of cell objects, where each cell stores the coordinate, color,\n * and i number which is used for point evaluation. The render component of the class will overlay the\n * interactive cell grid over the game board within a parent div, and will re render state with subsequent clicks.\n * The onClick method is responsible for tracking what cell a player taps in, the method takes coordinates as\n * parameters to help determine what happens on the board.\n */\nclass Board extends react_1.Component {\n  constructor(props) {\n    super(props);\n    // empty object cell array\n    this.cellObj = [];\n    // clicks are added here, get's the coordinates\n    this.addClick = (row, col) => {\n      let coords = new GetTheCoords();\n      coords.x = col;\n      coords.y = row;\n      console.log(`(x (row): ${coords.x}, y (col):${coords.y})`);\n      this.game.changeColor(coords.x, coords.y);\n      this.game.neighbors(coords.x, coords.y);\n      this.setState({}); // render the component\n    };\n    this.state = new GetTheCoords();\n    this.game = new GameModel(this.cellObj);\n    this.addClick = this.addClick.bind(this);\n  }\n  // method that returns an array of object cells\n  buildGrid() {\n    for (let i = 0; i < 16; i++) {\n      for (let j = 0; j < 16; j++) {\n        // access cell\n        let cell = {\n          coordinates: [i, j],\n          color: \"None\",\n          i: 0\n        };\n        this.cellObj.push(cell);\n      }\n    }\n    this.game.hiddenToken();\n    return this.cellObj;\n  }\n  // this will overlay the interactive cell grid over the game board\n  render() {\n    let grid = this.buildGrid();\n    this.cellObj.length = 256;\n    // print the score\n    let score = this.game.returnCount();\n    console.log(\"the score is: \", score);\n    // render canvas\n    const cnvs = /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"theGameBoard\",\n      width: this.props.height,\n      height: this.props.height,\n      style: {\n        border: \"10px solid rgb(201, 139, 210)\",\n        background: \"rgb(44, 196, 153)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 22\n    }, this);\n    // render the the array for JSX\n    const renderedArray = /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: grid.map((cell, lc) =>\n      /*#__PURE__*/\n      // list the cells\n      // return a function for onClick\n      // give each cell a border (square)\n      _jsxDEV(\"div\", {\n        onClick: () => this.addClick(cell.coordinates[1], cell.coordinates[0]),\n        style: {\n          border: \"1px solid black\",\n          cursor: \"pointer\",\n          width: 60,\n          height: 60,\n          color: cell.color,\n          background: cell.color\n        }\n      }, lc, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 31\n    }, this);\n    // contains the object cells as a flexible grid\n    // style parent div for the overlay and grid\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        width: this.props.width,\n        height: this.props.height,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      children: [cnvs, /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"overlay\",\n        style: {\n          position: \"absolute\",\n          display: \"hidden\",\n          width: \"100%\",\n          height: \"100%\",\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"grid\",\n          children: [\" \", renderedArray, /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              fontSize: \"50px\"\n            },\n            children: [\" your score \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 16\n    }, this);\n  }\n}\n/**\n * The GameModel class is responsible for handling all of the game logic. The method changeColor is\n * responsible for changing the color of each cell once tapped. Hidden token will generate a\n * random cell that has a point value. Return count will return the player score. The neighbors\n * method follows uses a Moore neighborhood cellular automata strategy to find the neighbor of\n * each cell a player taps on.\n */\nclass GameModel {\n  constructor(cells) {\n    this.cellObjects = cells;\n    this.count = 0;\n  }\n  changeColor(row, col) {\n    // given the row and column do something to the cell, like give it a color\n    const index = row * 16 + col;\n    const currColor = this.cellObjects[index].color;\n    const curr = this.cellObjects[index];\n    if (currColor === \"None\") {\n      curr.color = \"white\";\n    } else if (currColor === \"white\") {\n      curr.color = \"black\";\n    } else {\n      curr.color = \"white\";\n    }\n    console.log(\"changed color\");\n    // if the color is black, change it back\n  }\n  // initialize with a single token hidden in the 64 cell grid\n  hiddenToken() {\n    // random index from 1-64\n    const rnd = Math.floor(Math.random() * (Math.floor(256) - Math.ceil(1) + 1) + Math.ceil(1));\n    const rnd2 = Math.floor(Math.random() * (Math.floor(256) - Math.ceil(1) + 1) + Math.ceil(1));\n    // set the cell color of the random index\n    this.cellObjects[rnd].i = 1;\n    this.cellObjects[rnd2].i = 2;\n  }\n  returnCount() {\n    return this.count;\n  }\n  // capture the valued cells\n  neighbors(row, col) {\n    let neighbors = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n    let index = row * 16 + col;\n    let cell = this.cellObjects[index];\n    let currentColor = cell.color;\n    // find neigbors\n    for (let i = 0; i < neighbors.length; i++) {\n      let nRow = row + neighbors[i][0];\n      let nCol = col + neighbors[i][1];\n      if (nRow >= 0 && nRow < 16 && nCol >= 0 && nCol < 16) {\n        let index = nRow * 16 + nCol;\n        let nCell = this.cellObjects[index];\n        // capture the red\n        if (nCell.i == 1) {\n          nCell.color = \"red\";\n          nCell.i = 0;\n          this.count += 1 * 10;\n        }\n        // capture the yellow\n        if (nCell.i == 2) {\n          nCell.color = \"yellow\";\n          nCell.i = 0;\n          this.count += 1 * 100;\n        }\n      }\n    }\n  }\n}\n/**\n * This class is a framework for the game description.\n */\nclass Description extends react_1.Component {\n  render() {\n    // text reading the name of the game\n    // the rules\n    // and lets the player see their score\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          fontSize: \"50px\"\n        },\n        children: \"Click of game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          fontSize: \"30px\"\n        },\n        children: \"Rule: click anywhere in the grid to get points. Thats all.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          fontSize: \"30px\"\n        },\n        children: \"The points are allocated as follows: Red cell: 10pts, Yellow cell: 100pts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 16\n    }, this);\n  }\n}\nconst rootElem = document.getElementById('root');\nif (rootElem == null) {\n  alert('you forgot to put a root element in your HTML file.');\n}\nconst root = (0, client_1.createRoot)(rootElem);\n//<Board height={10} width={10}/>\nroot.render(/*#__PURE__*/_jsxDEV(react_1.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Description, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      height: 1000,\n      width: 1000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 256,\n  columnNumber: 13\n}, this));","map":{"version":3,"names":["_jsxFileName","jsxDEV","_jsxDEV","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","ownKeys","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","exports","react_1","require","client_1","GetTheCoords","constructor","x","y","MyListState","nClicks","Board","Component","props","cellObj","addClick","row","col","coords","console","log","game","changeColor","neighbors","setState","state","GameModel","bind","buildGrid","j","cell","coordinates","color","push","hiddenToken","render","grid","score","returnCount","cnvs","id","width","height","style","border","background","fileName","lineNumber","columnNumber","renderedArray","display","flexWrap","children","map","lc","onClick","cursor","position","top","left","right","bottom","fontSize","cells","cellObjects","count","index","currColor","curr","rnd","Math","floor","random","ceil","rnd2","currentColor","nRow","nCol","nCell","Description","rootElem","document","getElementById","alert","root","createRoot","StrictMode"],"sources":["/Users/dima/Desktop/\"Summer 2025\"/clickOfGame/src/index.jsx"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst client_1 = require(\"react-dom/client\");\nclass GetTheCoords {\n    constructor() {\n        this.x = 0;\n        this.y = 0;\n    }\n}\nclass MyListState {\n    constructor() {\n        this.nClicks = 0;\n    }\n}\n/**\n * The Board class encompasses a framework for the game playing field. The buildGrid method is\n * responsible for producing an array of cell objects, where each cell stores the coordinate, color,\n * and i number which is used for point evaluation. The render component of the class will overlay the\n * interactive cell grid over the game board within a parent div, and will re render state with subsequent clicks.\n * The onClick method is responsible for tracking what cell a player taps in, the method takes coordinates as\n * parameters to help determine what happens on the board.\n */\nclass Board extends react_1.Component {\n    constructor(props) {\n        super(props);\n        // empty object cell array\n        this.cellObj = [];\n        // clicks are added here, get's the coordinates\n        this.addClick = (row, col) => {\n            let coords = new GetTheCoords();\n            coords.x = col;\n            coords.y = row;\n            console.log(`(x (row): ${coords.x}, y (col):${coords.y})`);\n            this.game.changeColor(coords.x, coords.y);\n            this.game.neighbors(coords.x, coords.y);\n            this.setState({}); // render the component\n        };\n        this.state = new GetTheCoords();\n        this.game = new GameModel(this.cellObj);\n        this.addClick = this.addClick.bind(this);\n    }\n    // method that returns an array of object cells\n    buildGrid() {\n        for (let i = 0; i < 16; i++) {\n            for (let j = 0; j < 16; j++) {\n                // access cell\n                let cell = {\n                    coordinates: [i, j],\n                    color: \"None\",\n                    i: 0\n                };\n                this.cellObj.push(cell);\n            }\n        }\n        this.game.hiddenToken();\n        return this.cellObj;\n    }\n    // this will overlay the interactive cell grid over the game board\n    render() {\n        let grid = this.buildGrid();\n        this.cellObj.length = 256;\n        // print the score\n        let score = this.game.returnCount();\n        console.log(\"the score is: \", score);\n        // render canvas\n        const cnvs = <canvas id=\"theGameBoard\" width={this.props.height} height={this.props.height} style={{ border: \"10px solid rgb(201, 139, 210)\",\n                background: \"rgb(44, 196, 153)\" }}>\n            </canvas>;\n        // render the the array for JSX\n        const renderedArray = <div style={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n            }}>\n            {grid.map((cell, lc) => (\n            // list the cells\n            // return a function for onClick\n            // give each cell a border (square)\n            <div key={lc} onClick={() => this.addClick(cell.coordinates[1], cell.coordinates[0])} style={{ border: \"1px solid black\", cursor: \"pointer\", width: 60, height: 60, color: cell.color, background: cell.color }}>\n\n\n                </div>))}\n        </div>;\n        // contains the object cells as a flexible grid\n        // style parent div for the overlay and grid\n        return <div style={{\n                position: \"relative\",\n                width: this.props.width,\n                height: this.props.height,\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n            }}>\n\n                    {cnvs}\n           \n                <div id=\"overlay\" style={{\n                position: \"absolute\",\n                display: \"hidden\",\n                width: \"100%\",\n                height: \"100%\",\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n            }}>\n                        <div id=\"grid\"> {renderedArray}\n\n                            <ul style={{ fontSize: \"50px\" }}> your score {score}</ul>\n\n                        </div>\n                         \n                        \n                </div>\n\n        </div>;\n    }\n}\n/**\n * The GameModel class is responsible for handling all of the game logic. The method changeColor is\n * responsible for changing the color of each cell once tapped. Hidden token will generate a\n * random cell that has a point value. Return count will return the player score. The neighbors\n * method follows uses a Moore neighborhood cellular automata strategy to find the neighbor of\n * each cell a player taps on.\n */\nclass GameModel {\n    constructor(cells) {\n        this.cellObjects = cells;\n        this.count = 0;\n    }\n    changeColor(row, col) {\n        // given the row and column do something to the cell, like give it a color\n        const index = row * 16 + col;\n        const currColor = this.cellObjects[index].color;\n        const curr = this.cellObjects[index];\n        if (currColor === \"None\") {\n            curr.color = \"white\";\n        }\n        else if (currColor === \"white\") {\n            curr.color = \"black\";\n        }\n        else {\n            curr.color = \"white\";\n        }\n        console.log(\"changed color\");\n        // if the color is black, change it back\n    }\n    // initialize with a single token hidden in the 64 cell grid\n    hiddenToken() {\n        // random index from 1-64\n        const rnd = Math.floor(Math.random() * (Math.floor(256) - Math.ceil(1) + 1) + Math.ceil(1));\n        const rnd2 = Math.floor(Math.random() * (Math.floor(256) - Math.ceil(1) + 1) + Math.ceil(1));\n        // set the cell color of the random index\n        this.cellObjects[rnd].i = 1;\n        this.cellObjects[rnd2].i = 2;\n    }\n    returnCount() {\n        return this.count;\n    }\n    // capture the valued cells\n    neighbors(row, col) {\n        let neighbors = [\n            [0, 1],\n            [1, 0],\n            [0, -1],\n            [-1, 0],\n            [1, 1],\n            [1, -1],\n            [-1, 1],\n            [-1, -1]\n        ];\n        let index = row * 16 + col;\n        let cell = this.cellObjects[index];\n        let currentColor = cell.color;\n        // find neigbors\n        for (let i = 0; i < neighbors.length; i++) {\n            let nRow = row + neighbors[i][0];\n            let nCol = col + neighbors[i][1];\n            if (nRow >= 0 && nRow < 16 && nCol >= 0 && nCol < 16) {\n                let index = nRow * 16 + nCol;\n                let nCell = this.cellObjects[index];\n                // capture the red\n                if (nCell.i == 1) {\n                    nCell.color = \"red\";\n                    nCell.i = 0;\n                    this.count += 1 * 10;\n                }\n                // capture the yellow\n                if (nCell.i == 2) {\n                    nCell.color = \"yellow\";\n                    nCell.i = 0;\n                    this.count += 1 * 100;\n                }\n            }\n        }\n    }\n}\n/**\n * This class is a framework for the game description.\n */\nclass Description extends react_1.Component {\n    render() {\n        // text reading the name of the game\n        // the rules\n        // and lets the player see their score\n        return <div>\n            <p>\n            </p>\n                <ul style={{ fontSize: \"50px\" }}>Click of game</ul>\n                <li style={{ fontSize: \"30px\" }}>Rule: click anywhere in the grid to get points. Thats all.\n                </li>\n                <li style={{ fontSize: \"30px\" }}>The points are allocated as follows: Red cell: 10pts, Yellow cell: 100pts</li>\n        </div>;\n    }\n}\nconst rootElem = document.getElementById('root');\nif (rootElem == null) {\n    alert('you forgot to put a root element in your HTML file.');\n}\nconst root = (0, client_1.createRoot)(rootElem);\n//<Board height={10} width={10}/>\nroot.render(<react_1.StrictMode>\n        <div>\n            <Description />\n            <Board height={1000} width={1000}/>\n        </div>\n       \n    </react_1.StrictMode>);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}