{"ast":null,"code":"\"use strict\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(){var ownKeys=function(o){ownKeys=Object.getOwnPropertyNames||function(o){var ar=[];for(var k in o)if(Object.prototype.hasOwnProperty.call(o,k))ar[ar.length]=k;return ar;};return ownKeys(o);};return function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k=ownKeys(mod),i=0;i<k.length;i++)if(k[i]!==\"default\")__createBinding(result,mod,k[i]);__setModuleDefault(result,mod);return result;};}();Object.defineProperty(exports,\"__esModule\",{value:true});const react_1=__importStar(require(\"react\"));const client_1=require(\"react-dom/client\");class GetTheCoords{constructor(){this.x=0;this.y=0;}}class MyListState{constructor(){this.nClicks=0;}}/**\n * The Board class encompasses a framework for the game playing field. The buildGrid method is\n * responsible for producing an array of cell objects, where each cell stores the coordinate, color,\n * and i number which is used for point evaluation. The render component of the class will overlay the\n * interactive cell grid over the game board within a parent div, and will re render state with subsequent clicks.\n * The onClick method is responsible for tracking what cell a player taps in, the method takes coordinates as\n * parameters to help determine what happens on the board.\n */class Board extends react_1.Component{constructor(props){super(props);// empty object cell array\nthis.cellObj=[];// clicks are added here, get's the coordinates\nthis.addClick=(row,col)=>{let coords=new GetTheCoords();coords.x=col;coords.y=row;console.log(`(x (row): ${coords.x}, y (col):${coords.y})`);this.game.changeColor(coords.x,coords.y);this.game.neighbors(coords.x,coords.y);this.setState({});// render the component\n};this.state=new GetTheCoords();this.game=new GameModel(this.cellObj);this.addClick=this.addClick.bind(this);}// method that returns an array of object cells\nbuildGrid(){for(let i=0;i<16;i++){for(let j=0;j<16;j++){// access cell\nlet cell={coordinates:[i,j],color:\"None\",i:0};this.cellObj.push(cell);}}this.game.hiddenToken();return this.cellObj;}// this will overlay the interactive cell grid over the game board\nrender(){let grid=this.buildGrid();this.cellObj.length=256;// print the score\nlet score=this.game.returnCount();console.log(\"the score is: \",score);// render canvas\nconst cnvs=/*#__PURE__*/_jsx(\"canvas\",{id:\"theGameBoard\",width:this.props.height,height:this.props.height,style:{border:\"10px solid rgb(201, 139, 210)\",background:\"rgb(44, 196, 153)\"}});// render the the array for JSX\nconst renderedArray=/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",flexWrap:\"wrap\"},children:grid.map((cell,lc)=>/*#__PURE__*/// list the cells\n// return a function for onClick\n// give each cell a border (square)\n_jsx(\"div\",{onClick:()=>this.addClick(cell.coordinates[1],cell.coordinates[0]),style:{border:\"1px solid black\",cursor:\"pointer\",width:60,height:60,color:cell.color,background:cell.color}},lc))});// contains the object cells as a flexible grid\n// style parent div for the overlay and grid\nreturn/*#__PURE__*/_jsxs(\"div\",{style:{position:\"relative\",width:this.props.width,height:this.props.height,top:0,left:0,right:0,bottom:0},children:[cnvs,/*#__PURE__*/_jsx(\"div\",{id:\"overlay\",style:{position:\"absolute\",display:\"hidden\",width:\"100%\",height:\"100%\",top:0,left:0,right:0,bottom:0},children:/*#__PURE__*/_jsxs(\"div\",{id:\"grid\",children:[\" \",renderedArray,/*#__PURE__*/_jsxs(\"ul\",{style:{fontSize:\"50px\"},children:[\" your score \",score]})]})})]});}}/**\n * The GameModel class is responsible for handling all of the game logic. The method changeColor is\n * responsible for changing the color of each cell once tapped. Hidden token will generate a\n * random cell that has a point value. Return count will return the player score. The neighbors\n * method follows uses a Moore neighborhood cellular automata strategy to find the neighbor of\n * each cell a player taps on.\n */class GameModel{constructor(cells){this.cellObjects=cells;this.count=0;}changeColor(row,col){// given the row and column do something to the cell, like give it a color\nconst index=row*16+col;const currColor=this.cellObjects[index].color;const curr=this.cellObjects[index];if(currColor===\"None\"){curr.color=\"white\";}else if(currColor===\"white\"){curr.color=\"black\";}else{curr.color=\"white\";}console.log(\"changed color\");// if the color is black, change it back\n}// initialize with a single token hidden in the 64 cell grid\nhiddenToken(){// random index from 1-64\nconst rnd=Math.floor(Math.random()*(Math.floor(256)-Math.ceil(1)+1)+Math.ceil(1));const rnd2=Math.floor(Math.random()*(Math.floor(256)-Math.ceil(1)+1)+Math.ceil(1));// set the cell color of the random index\nthis.cellObjects[rnd].i=1;this.cellObjects[rnd2].i=2;}returnCount(){return this.count;}// capture the valued cells\nneighbors(row,col){let neighbors=[[0,1],[1,0],[0,-1],[-1,0],[1,1],[1,-1],[-1,1],[-1,-1]];let index=row*16+col;let cell=this.cellObjects[index];let currentColor=cell.color;// find neigbors\nfor(let i=0;i<neighbors.length;i++){let nRow=row+neighbors[i][0];let nCol=col+neighbors[i][1];if(nRow>=0&&nRow<16&&nCol>=0&&nCol<16){let index=nRow*16+nCol;let nCell=this.cellObjects[index];// capture the red\nif(nCell.i==1){nCell.color=\"red\";nCell.i=0;this.count+=1*10;}// capture the yellow\nif(nCell.i==2){nCell.color=\"yellow\";nCell.i=0;this.count+=1*100;}}}}}/**\n * This class is a framework for the game description.\n */class Description extends react_1.Component{render(){// text reading the name of the game\n// the rules\n// and lets the player see their score\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{}),/*#__PURE__*/_jsx(\"ul\",{style:{fontSize:\"50px\"},children:\"Click of game\"}),/*#__PURE__*/_jsx(\"li\",{style:{fontSize:\"30px\"},children:\"Rule: click anywhere in the grid to get points. Thats all.\"}),/*#__PURE__*/_jsx(\"li\",{style:{fontSize:\"30px\"},children:\"The points are allocated as follows: Red cell: 10pts, Yellow cell: 100pts\"})]});}}const rootElem=document.getElementById('root');if(rootElem==null){alert('you forgot to put a root element in your HTML file.');}const root=(0,client_1.createRoot)(rootElem);//<Board height={10} width={10}/>\nroot.render(/*#__PURE__*/_jsx(react_1.StrictMode,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Description,{}),/*#__PURE__*/_jsx(Board,{height:1000,width:1000})]})}));","map":{"version":3,"names":["jsx","_jsx","jsxs","_jsxs","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","ownKeys","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","exports","react_1","require","client_1","GetTheCoords","constructor","x","y","MyListState","nClicks","Board","Component","props","cellObj","addClick","row","col","coords","console","log","game","changeColor","neighbors","setState","state","GameModel","bind","buildGrid","j","cell","coordinates","color","push","hiddenToken","render","grid","score","returnCount","cnvs","id","width","height","style","border","background","renderedArray","display","flexWrap","children","map","lc","onClick","cursor","position","top","left","right","bottom","fontSize","cells","cellObjects","count","index","currColor","curr","rnd","Math","floor","random","ceil","rnd2","currentColor","nRow","nCol","nCell","Description","rootElem","document","getElementById","alert","root","createRoot","StrictMode"],"sources":["/Users/dima/Desktop/\"Summer 2025\"/clickOfGame/src/index.jsx"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst client_1 = require(\"react-dom/client\");\nclass GetTheCoords {\n    constructor() {\n        this.x = 0;\n        this.y = 0;\n    }\n}\nclass MyListState {\n    constructor() {\n        this.nClicks = 0;\n    }\n}\n/**\n * The Board class encompasses a framework for the game playing field. The buildGrid method is\n * responsible for producing an array of cell objects, where each cell stores the coordinate, color,\n * and i number which is used for point evaluation. The render component of the class will overlay the\n * interactive cell grid over the game board within a parent div, and will re render state with subsequent clicks.\n * The onClick method is responsible for tracking what cell a player taps in, the method takes coordinates as\n * parameters to help determine what happens on the board.\n */\nclass Board extends react_1.Component {\n    constructor(props) {\n        super(props);\n        // empty object cell array\n        this.cellObj = [];\n        // clicks are added here, get's the coordinates\n        this.addClick = (row, col) => {\n            let coords = new GetTheCoords();\n            coords.x = col;\n            coords.y = row;\n            console.log(`(x (row): ${coords.x}, y (col):${coords.y})`);\n            this.game.changeColor(coords.x, coords.y);\n            this.game.neighbors(coords.x, coords.y);\n            this.setState({}); // render the component\n        };\n        this.state = new GetTheCoords();\n        this.game = new GameModel(this.cellObj);\n        this.addClick = this.addClick.bind(this);\n    }\n    // method that returns an array of object cells\n    buildGrid() {\n        for (let i = 0; i < 16; i++) {\n            for (let j = 0; j < 16; j++) {\n                // access cell\n                let cell = {\n                    coordinates: [i, j],\n                    color: \"None\",\n                    i: 0\n                };\n                this.cellObj.push(cell);\n            }\n        }\n        this.game.hiddenToken();\n        return this.cellObj;\n    }\n    // this will overlay the interactive cell grid over the game board\n    render() {\n        let grid = this.buildGrid();\n        this.cellObj.length = 256;\n        // print the score\n        let score = this.game.returnCount();\n        console.log(\"the score is: \", score);\n        // render canvas\n        const cnvs = <canvas id=\"theGameBoard\" width={this.props.height} height={this.props.height} style={{ border: \"10px solid rgb(201, 139, 210)\",\n                background: \"rgb(44, 196, 153)\" }}>\n            </canvas>;\n        // render the the array for JSX\n        const renderedArray = <div style={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n            }}>\n            {grid.map((cell, lc) => (\n            // list the cells\n            // return a function for onClick\n            // give each cell a border (square)\n            <div key={lc} onClick={() => this.addClick(cell.coordinates[1], cell.coordinates[0])} style={{ border: \"1px solid black\", cursor: \"pointer\", width: 60, height: 60, color: cell.color, background: cell.color }}>\n\n\n                </div>))}\n        </div>;\n        // contains the object cells as a flexible grid\n        // style parent div for the overlay and grid\n        return <div style={{\n                position: \"relative\",\n                width: this.props.width,\n                height: this.props.height,\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n            }}>\n\n                    {cnvs}\n           \n                <div id=\"overlay\" style={{\n                position: \"absolute\",\n                display: \"hidden\",\n                width: \"100%\",\n                height: \"100%\",\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n            }}>\n                        <div id=\"grid\"> {renderedArray}\n\n                            <ul style={{ fontSize: \"50px\" }}> your score {score}</ul>\n\n                        </div>\n                         \n                        \n                </div>\n\n        </div>;\n    }\n}\n/**\n * The GameModel class is responsible for handling all of the game logic. The method changeColor is\n * responsible for changing the color of each cell once tapped. Hidden token will generate a\n * random cell that has a point value. Return count will return the player score. The neighbors\n * method follows uses a Moore neighborhood cellular automata strategy to find the neighbor of\n * each cell a player taps on.\n */\nclass GameModel {\n    constructor(cells) {\n        this.cellObjects = cells;\n        this.count = 0;\n    }\n    changeColor(row, col) {\n        // given the row and column do something to the cell, like give it a color\n        const index = row * 16 + col;\n        const currColor = this.cellObjects[index].color;\n        const curr = this.cellObjects[index];\n        if (currColor === \"None\") {\n            curr.color = \"white\";\n        }\n        else if (currColor === \"white\") {\n            curr.color = \"black\";\n        }\n        else {\n            curr.color = \"white\";\n        }\n        console.log(\"changed color\");\n        // if the color is black, change it back\n    }\n    // initialize with a single token hidden in the 64 cell grid\n    hiddenToken() {\n        // random index from 1-64\n        const rnd = Math.floor(Math.random() * (Math.floor(256) - Math.ceil(1) + 1) + Math.ceil(1));\n        const rnd2 = Math.floor(Math.random() * (Math.floor(256) - Math.ceil(1) + 1) + Math.ceil(1));\n        // set the cell color of the random index\n        this.cellObjects[rnd].i = 1;\n        this.cellObjects[rnd2].i = 2;\n    }\n    returnCount() {\n        return this.count;\n    }\n    // capture the valued cells\n    neighbors(row, col) {\n        let neighbors = [\n            [0, 1],\n            [1, 0],\n            [0, -1],\n            [-1, 0],\n            [1, 1],\n            [1, -1],\n            [-1, 1],\n            [-1, -1]\n        ];\n        let index = row * 16 + col;\n        let cell = this.cellObjects[index];\n        let currentColor = cell.color;\n        // find neigbors\n        for (let i = 0; i < neighbors.length; i++) {\n            let nRow = row + neighbors[i][0];\n            let nCol = col + neighbors[i][1];\n            if (nRow >= 0 && nRow < 16 && nCol >= 0 && nCol < 16) {\n                let index = nRow * 16 + nCol;\n                let nCell = this.cellObjects[index];\n                // capture the red\n                if (nCell.i == 1) {\n                    nCell.color = \"red\";\n                    nCell.i = 0;\n                    this.count += 1 * 10;\n                }\n                // capture the yellow\n                if (nCell.i == 2) {\n                    nCell.color = \"yellow\";\n                    nCell.i = 0;\n                    this.count += 1 * 100;\n                }\n            }\n        }\n    }\n}\n/**\n * This class is a framework for the game description.\n */\nclass Description extends react_1.Component {\n    render() {\n        // text reading the name of the game\n        // the rules\n        // and lets the player see their score\n        return <div>\n            <p>\n            </p>\n                <ul style={{ fontSize: \"50px\" }}>Click of game</ul>\n                <li style={{ fontSize: \"30px\" }}>Rule: click anywhere in the grid to get points. Thats all.\n                </li>\n                <li style={{ fontSize: \"30px\" }}>The points are allocated as follows: Red cell: 10pts, Yellow cell: 100pts</li>\n        </div>;\n    }\n}\nconst rootElem = document.getElementById('root');\nif (rootElem == null) {\n    alert('you forgot to put a root element in your HTML file.');\n}\nconst root = (0, client_1.createRoot)(rootElem);\n//<Board height={10} width={10}/>\nroot.render(<react_1.StrictMode>\n        <div>\n            <Description />\n            <Board height={1000} width={1000}/>\n        </div>\n       \n    </react_1.StrictMode>);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}